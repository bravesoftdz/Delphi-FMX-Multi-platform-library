unit uPhotoService.IOS;

interface

uses
    FMX.TMSNativeUIImagePickerController
  , FMX.MediaLibrary.Actions
  , uPhotoServiceInterface
  , System.SysUtils
  , FMX.Graphics;

type

TIOSPhotoService = class(TInterfacedObject,IPhotoService)
protected
  FPhotoTakenOrPicked: TProc<TBitmap>;
  TMSFMXNativeUIImagePickerController1: TTMSFMXNativeUIImagePickerController;
  TakePhotoFromCameraAction: TTakePhotoFromCameraAction;
  procedure TMSFMXNativeUIImagePickerController1DidFinishPickingBitmap(Sender: TObject; aBitmap: TBitmap);
public
  procedure TakePhoto;
  procedure PickPhoto;
  function GetPhotoTaken: TProc<TBitmap>;
  procedure SetPhotoTaken(Value: TProc<TBitmap>);
  property OnPhotoTakenOrPicked: TProc<TBitmap> read GetPhotoTaken write SetPhotoTaken;

  constructor Create;
  destructor Destroy; override;
end;

implementation

{ TIOSPhotoService }

constructor TIOSPhotoService.Create;
begin
  TMSFMXNativeUIImagePickerController1 := TTMSFMXNativeUIImagePickerController.Create(nil);
  TMSFMXNativeUIImagePickerController1.OnDidFinishPickingBitmap := TMSFMXNativeUIImagePickerController1DidFinishPickingBitmap;
  //TMSFMXNativeUIImagePickerController1.OnDidCancel := IOSCAncelImagePicking;
end;

destructor TIOSPhotoService.Destroy;
begin
  TMSFMXNativeUIImagePickerController1.Free;
  inherited;
end;

function TIOSPhotoService.GetPhotoTaken: TProc<TBitmap>;
begin
  Result := FPhotoTakenOrPicked;
end;

procedure TIOSPhotoService.PickPhoto;
begin
  TMSFMXNativeUIImagePickerController1.Show;
end;

procedure TIOSPhotoService.SetPhotoTaken(Value: TProc<TBitmap>);
begin
  FPhotoTakenOrPicked := Value;
end;

procedure TIOSPhotoService.TakePhoto;
begin
   TakePhotoFromCameraAction.ExecuteTarget(Button);
end;

procedure TIOSPhotoService.TMSFMXNativeUIImagePickerController1DidFinishPickingBitmap(
  Sender: TObject; aBitmap: TBitmap);
begin
  if Assigned(FPhotoTakenOrPicked) then
  begin
    FPhotoTakenOrPicked(aBitmap);
  end;
end;

end.
